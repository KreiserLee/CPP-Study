生存期：1.局部自动对象，当我们进入其定义所在的程序块时被创建，在离开块时销毁。
        2.局部static对象，在第一次使用前分配，在程序结束时销毁。
        3.动态分配的对象，当显示地被释放时，才会销毁。

静态内存；局部static对象、类static数据成员、全局变量（定义在函数之外的变量）
栈内存：  局部自动对象
堆内存：  动态分配的对象

动态内存的管理通过两个运算符完成：new、delete
new：在动态内存中为对象分配空间并返回一个指向该对象的指针，可以选择对对象进行初始化。
delete：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。

智能指针，定义于 <memory> 头文件中。
作用：管理动态内存，（使用动态内存更容易和更安全）。
本质：指针？
行为：负责自动释放所指向的对象。类似常规指针
类别；shared_ptr（允许多个指针指向同一个对象）/unique_ptr（独占所指向的对象）
定义(智能指针，并非动态分配内存)：
    shared_ptr<string> p1; // 智能指针是模板，必须提供指针可以指向的类型，在尖括号中给出
    shared_ptr<list<int>> p2;
初始化：
    1.默认初始化的智能指针中保存着一个空指针
    2.
使用：智能指针的使用方式与普通指针类似。可以通过解引用返回它指向的对象。
动态分配内存：
    std::make_shared<int>();// 返回指向此对象的shared_ptr
    等价于 new int(); // ??? 返回指向此int的指针(int *)
    
weak_ptr
为了解决引用关系中出现环的情况。
1.不控制所指向对象生存期的智能指针。
2.它指向由一个shared_ptr管理的对象。
3.将一个weak_ptr绑定到一个shared_ptr不会改变其引用计数。
4.当创建一个weak_ptr时，要用一个shared_ptr来初始化它：
    shared_ptr<int> p = make_shared<int>(42);
    weak_ptr<int> wp(p); // wp弱共享p；p的引用计数不变；
5.

